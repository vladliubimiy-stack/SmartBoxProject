import telebot
import paho.mqtt.client as mqtt
import paho.mqtt.publish as publish
import time

BOT_TOKEN = '8485869663:AAG2TBAIFJ9oZaNR60TKwHTYf4Ji8l-Z9h0'
MQTT_BROKER = '192.168.0.14'
MQTT_PORT = 1883

bot = telebot.TeleBot(BOT_TOKEN)

# –≥–ª–æ–±–∞–ª—å–Ω–æ —Ö—Ä–∞–Ω–∏–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–∞—Ç—á–∏–∫–∞
last_light_value = None

# —Å–æ–∑–¥–∞—ë–º MQTT –∫–ª–∏–µ–Ω—Ç –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
mqtt_client = mqtt.Client()

def on_connect(client, userdata, flags, rc):
    print("MQTT connected with code", rc)
    client.subscribe("home/lightsensor")

def on_message(client, userdata, msg):
    global last_light_value
    if msg.topic == "home/lightsensor":
        try:
            last_light_value = int(msg.payload.decode())
        except:
            last_light_value = None

mqtt_client.on_connect = on_connect
mqtt_client.on_message = on_message
mqtt_client.connect(MQTT_BROKER, MQTT_PORT, 60)
mqtt_client.loop_start()


# ====== —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–≤–µ—Ç–∞ ======
def try_switch_light(command, target_state, chat_id):
    """
    command: "ON" –∏–ª–∏ "OFF"
    target_state: "on" –∏–ª–∏ "off"
    """
    global last_light_value

    for attempt in range(5):
        # —à–ª—ë–º –∫–æ–º–∞–Ω–¥—É –Ω–∞ ESP
        publish.single("home/relay1", command, hostname=MQTT_BROKER, port=MQTT_PORT)

        # –∂–¥—ë–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞—Ç—á–∏–∫–∞
        time.sleep(2)
        val = last_light_value
        print("LightSensor:", val)

        if val is None:
            continue

        # –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–∫–ª—é—á–µ–Ω–∏—è
        if target_state == "on" and val < 1300:
            bot.send_message(chat_id, "‚úÖ –°–≤–µ—Ç –≤–∫–ª—é—á–µ–Ω")
            return
        # –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–∫–ª—é—á–µ–Ω–∏—è
        if target_state == "off" and val > 2200:
            bot.send_message(chat_id, "‚úÖ –°–≤–µ—Ç –≤—ã–∫–ª—é—á–µ–Ω")
            return

    # –µ—Å–ª–∏ 5 —Ä–∞–∑ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å
    bot.send_message(chat_id, "‚ùå –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –ø–æ –ø–∏–∑–¥–µ, –∏–¥–∏ —á–∏–Ω–∏")


# ====== –±–æ—Ç–∞ –∑–∞–ø—É—Å–∫–∞–µ–º ======
@bot.message_handler(commands=['start'])
def send_welcome(message):
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("üí° –í–∫–ª—é—á–∏—Ç—å —Å–≤–µ—Ç", "üîå –í—ã–∫–ª—é—á–∏—Ç—å —Å–≤–µ—Ç")
    markup.add("‚¨ÜÔ∏è –û—Ç–∫—Ä—ã—Ç—å –≤–æ—Ä–æ—Ç–∞", "‚¨áÔ∏è –ó–∞–∫—Ä—ã—Ç—å –≤–æ—Ä–æ—Ç–∞")
    bot.send_message(message.chat.id, "–ô–æ –±—Ä–∞—Ç, —É–ø—Ä–∞–≤–ª—è–π —É–º–Ω—ã–º –¥–æ–º–æ–º:", reply_markup=markup)


@bot.message_handler(func=lambda m: True)
def handle_buttons(message):
    text = message.text

    if text == "üí° –í–∫–ª—é—á–∏—Ç—å —Å–≤–µ—Ç":
        try_switch_light("ON", "on", message.chat.id)

    elif text == "üîå –í—ã–∫–ª—é—á–∏—Ç—å —Å–≤–µ—Ç":
        try_switch_light("OFF", "off", message.chat.id)

    elif text == "‚¨ÜÔ∏è –û—Ç–∫—Ä—ã—Ç—å –≤–æ—Ä–æ—Ç–∞":
        publish.single("home/shutter", "OPEN", hostname=MQTT_BROKER, port=MQTT_PORT)
        bot.send_message(message.chat.id, "‚¨ÜÔ∏è –û—Ç–∫—Ä—ã–≤–∞—é –≤–æ—Ä–æ—Ç–∞")

    elif text == "‚¨áÔ∏è –ó–∞–∫—Ä—ã—Ç—å –≤–æ—Ä–æ—Ç–∞":
        publish.single("home/shutter", "CLOSE", hostname=MQTT_BROKER, port=MQTT_PORT)
        bot.send_message(message.chat.id, "‚¨áÔ∏è –ó–∞–∫—Ä—ã–≤–∞—é –≤–æ—Ä–æ—Ç–∞")

    else:
        bot.send_message(message.chat.id, "–ù–µ –ø–æ–Ω—è–ª –∫–æ–º–∞–Ω–¥—É, –±—Ä–∞—Ç–∏—à–∫–∞.")


print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
bot.infinity_polling()
